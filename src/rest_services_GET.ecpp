<#
 #
 # Copyright (C) 2019 Eaton
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License along
 # with this program; if not, write to the Free Software Foundation, Inc.,
 # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 #
 #><#
/*!
 * \file rest_csr_GET.ecpp
 * \author Mauro Guerrera <mauroguerrera@eaton.com>
 * \brief Implementation of rest handler for certificate generator
 *        GET - get the list of available services
 */
 #><%pre>
#include <map>
#include <string>

#include <fty_common.h>
#include <fty_common_mlm.h>
#include <fty_common_rest.h>
#include <fty-certificate-generator.h>
#include <certgen_accessor.h>
#include <cxxtools/jsonserializer.h>

#include "src/helpers_certificate_generator_rest.h"

</%pre>
<%request scope="global">
UserInfo user;
</%request>
<%cpp>
    using namespace certgen;
    using namespace restapi;

    // check if we can execute
    static const std::map<BiosProfile, std::string> PERMISSIONS = {
        {BiosProfile::Admin, "R"}};

    CHECK_USER_PERMISSIONS_OR_DIE(PERMISSIONS);

    try
    {
        mlm::MlmSyncClient syncClient(CLIENT_ID, DESTINATION, 1000, END_POINT);
        CertGenAccessor cgAccessor(syncClient);

        std::vector<std::string> serviceList = cgAccessor.getAllServices();

        cxxtools::SerializationInfo si;

        si <<= serviceList;

        cxxtools::JsonSerializer serializer(reply.out());
        serializer.serialize(si);

        log_info_audit("Request GET internal-certificate -> getting list of services");
    }
    catch (const std::exception &e)
    {
        log_info_audit(
            "Request GET internal-certificate -> getting list of services FAILED");

        std::string msg = TRANSLATE_ME(
            "Error while retrieving list of services");

        http_die("internal-error", msg.c_str());
    }

</%cpp>
